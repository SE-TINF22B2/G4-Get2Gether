@use '@angular/material' as mat;
@use '@angular/material-experimental' as matx;
@use "./variables/color" as color-vars;
@use "./variables/size" as size-vars;

@include mat.core();

//--------------------------------------------------//
//                Utilities                         //
//--------------------------------------------------//

@function define-theme($type: light, $primary, $tertiary) {
  @return matx.define-theme((
    color: (
      theme-type: $type,
      primary: $primary,
      tertiary: $tertiary
    ),
    typography: (
      plain-family: (Mada, Roboto, sans-serif)
    )
  ));
}

@mixin apply-theme($theme, $is-base: false) {
  @if ($is-base) {
    @include mat.all-component-themes($theme);
    @include size-vars.apply-size-variables($theme);
  } @else {
    // Only apply color styles without reapplying the same typography and density styles
    @include mat.all-component-colors($theme);
  }

  @include matx.color-variants-back-compat($theme);
  @include color-vars.apply-color-variables($theme);
}


//--------------------------------------------------//
//                Theme Variants                    //
//--------------------------------------------------//

$light-default: define-theme(light, matx.$m3-azure-palette, matx.$m3-violet-palette);
$light-gy: define-theme(light, matx.$m3-green-palette, matx.$m3-yellow-palette);
$light-bg: define-theme(light, matx.$m3-blue-palette, matx.$m3-green-palette);

$dark-default: define-theme(dark, matx.$m3-azure-palette, matx.$m3-violet-palette);
$dark-ry: define-theme(dark, matx.$m3-red-palette, matx.$m3-yellow-palette);
$dark-bv: define-theme(dark, matx.$m3-blue-palette, matx.$m3-violet-palette);


//$red-default: define-theme(red, matx.$m3-azure-palette, matx.$m3-violet-palette);
//$yellow-default: define-theme(yellow, matx.$m3-azure-palette, matx.$m3-violet-palette);
//$green-default: define-theme(green, matx.$m3-azure-palette, matx.$m3-violet-palette);
//$blue-default: define-theme(blue, matx.$m3-azure-palette, matx.$m3-violet-palette);



//define primary colors for the theme preview
:root{
  --light-primary: #{mat.get-theme-color($light-default, primary)};
  //--light-채-primary: #{mat.get-theme-color($light-채, primary)};
  --light-gy-primary: #{mat.get-theme-color($light-gy, primary)};
  --light-bg-primary: #{mat.get-theme-color($light-bg, primary)};

  --dark-primary: #{mat.get-theme-color($dark-default, primary)};
  //--dark-체-primary: #{mat.get-theme-color($dark-체, primary)};
  --dark-ry-primary: #{mat.get-theme-color($dark-ry, primary)};
  --dark-bv-primary: #{mat.get-theme-color($dark-bv, primary)};

}
// apply default theme
html {
  @include apply-theme($light-default, true);
}

// apply other theme variants
html[theme="dark"] {
  @include apply-theme($dark-default);
}
